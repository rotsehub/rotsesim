# -*- coding: utf-8 -*-
"""
Created on Fri Feb 17 22:28:09 2023

@author: gigic
"""

#import sys
# sys.path.append("..")

import numpy as np
import random
import matplotlib.pyplot as plt
import pandas as pd
import configparser
import io
import Star
import os
import StarGenerator
import datetime
from zoneinfo import ZoneInfo
import DayNightFilter
import ElevationFilter
from scipy.interpolate import CubicSpline

class ObservationTimes:
    """
    A class to represent the observation times of stars in the sky based on user-defined parameters.
    
    Member variables
    ----------
    - __instaSolarLuminosity : float 
        The instantaneous solar luminosity value.
        
    - __field_center_ra : float
        The right ascension of the field center.
        
    - __field_center_dec : float
        The declination of the field center.
        
    - __fov : float 
        The field of view.
        
    - __min_star_separation : float 
        The minimum star separation.
        
    - __excel_files_location : str
        The location of the Excel files with MESA outputs.
        
    - __obsLocationLatitude : str
        The latitude of the observation location.
        
    - __obsLocationLongitude : str 
        The longitude of the observation location.
        
    - __obsLocationTimeZone : str
        The timezone of the observation location.
        
    - __start_date : datetime
        The start date of the simulation date range.
        
    - __end_date : datetime
        The end date of the simulation date range.
        
    - __elevationThreshold : float
        The elevation threshold for filtering observations.
        
    - __StarsArray : list 
        A list of Star objects generated by the StarGenerator.
        
    
    Methods
    ----------
    
    - __init__(self): 
        Initializes the ObservationTimes object and reads the configuration file to populate the member variables.Then, it generates star coordinates, reads the data, plots the stars, and filters the data based on the day/night cycle and elevation threshold.
                 
    - getStarsArray(self): 
        Returns the member array of star objects StarsArray with all the related data (including coordinates of the star and all simulated values)
            
    """
    def __init__(self):
        """
        Initializes the ObservationTimes object and reads the configuration file to populate the member variables.
        Then, it generates star coordinates, reads the data, plots the stars, and filters the data based on the day/night cycle
        and elevation threshold.
        """
        
        config = configparser.ConfigParser()
        config.read('config.ini')
    
        ## Constants
        self.__instaSolarLuminosity = float(config["Constants"]["instaSolarLuminosity"])
        
        ## FieldOfViewData
        config.read('config.ini')
        self.__field_center_ra = float(config["FieldOfViewData"]["field_center_ra"])
        self.__field_center_dec = float(config["FieldOfViewData"]["field_center_dec"])                            
        self.__fov = float(config["FieldOfViewData"]["fov"])
        self.__min_star_separation = float(config["FieldOfViewData"]["min_star_separation"])
        
        ## ExcelFilesLocations
        self.__excel_files_location = config["ExcelFilesLocations"]["mesaOutputs"]
        
        ## ObservationLocationInfo
        self.__obsLocationLatitude = config["ObservationLocationInfo"]["latitude"]
        self.__obsLocationLongitude = config["ObservationLocationInfo"]["longitude"]
        self.__obsLocationTimeZone = config["ObservationLocationInfo"]["timeZone"]
        
        ## SimulationDateRange
        self.__start_date = datetime.datetime.strptime(config["SimulationDateRange"]["start_date"], '%m/%d/%Y %H:%M:%S')
        self.__end_date = datetime.datetime.strptime(config["SimulationDateRange"]["end_date"], '%m/%d/%Y %H:%M:%S')
        
        ## FilteringParameters
        self.__elevationThreshold = float(config["FilteringParameters"]["elevationThreshold"])
        
        ## Attach the local timezone of the obeservation location to the start_date and end_date member variables
        timeZone = ZoneInfo(self.__obsLocationTimeZone)
        self.__start_date = self.__start_date.replace(tzinfo=timeZone)
        self.__end_date = self.__end_date.replace(tzinfo=timeZone)
        
        ## Generate coordinates for the star and read the data
        self.__StarsArray = StarGenerator.StarGenerator.GenerateStars(self.__field_center_ra, self.__field_center_dec, self.__fov, self.__min_star_separation, self.__excel_files_location, self.__instaSolarLuminosity)
        
        ## Plot the stars in the sky
        StarGenerator.StarGenerator.plot_stars(self.__StarsArray)
        
        ## Go star by star
        for star in self.__StarsArray:
            ## Filter all the days out of the DataFrame
            star.setData( DayNightFilter.DayNightFilter.filter_night_entries(star.getData(), self.__start_date, self.__end_date, self.__obsLocationLatitude, self.__obsLocationLongitude))
            ## Filter all elevation less than the threshold (config value)
            star.setData(ElevationFilter.ElevationFilter.Filter_By_Elevation(star.getData(), self.__obsLocationLatitude, self.__obsLocationLongitude, star.getRA(), star.getDec(), self.__start_date, self.__end_date, self.__elevationThreshold))

    def getStarsArray(self):
        return self.__StarsArray
    
ObservationTimesObject = ObservationTimes()