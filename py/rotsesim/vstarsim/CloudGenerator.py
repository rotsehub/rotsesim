# -*- coding: utf-8 -*-
"""
Created on Fri Mar 31 18:50:23 2023

@author: Zachary McIlroy
"""

import numpy as np
import random
import matplotlib.pyplot as plt
import Cloud

class CloudGenerator:
    
    
    # This method generates rectangular clouds within the sky overall and takes an integer between 0 and 100 as the cloud coverage and returns a sky
    # covered by clouds that match that percentage within 10%
    def generateClouds(cloudPercentage : float, firstCloudSizePercentage : float):
        
        # List of clouds that will have clouds added to it until the cloud percentage argument is reached
        clouds = []
        
        # Area of the sky covered by clouds
        cloudsArea = 0
        
        # Simple approximation for the area of the sky in degrees
        skyArea = 180*360
        
        # This while loop iterates until the percentage of the sky covered by clouds reaches the cloud percentage passed into the method
        while cloudsArea/skyArea < cloudPercentage/100:
            
            # Boolean used to check if a cloud overlaps any already generated clouds in the current clouds array
            overlap = True
            
            # This while loop iterates until a cloud is successfully added to the clouds array
            while overlap == True:
                overlap = False
                
                # This if/else block creates the first cloud to be much larger than the rest to achieve results closer to reality
                if len(clouds) == 0:
                    
                    # Four points are generated by which the rectangular shape can be made. The x1 and y1 coordinate are specifically chosen to be at least
                    # the max width and height of the shape away from the edge of the sky so that no part of the cloud ever goes beyond the edge of the 
                    # visible sky. This would lead to inaccuracy in the area calculations. The size of this first cloud is currently set to a percentage of the 
                    # overall cloud coverage, which is specified in the config file. For example, if the cloud coverage was 60%, the first cloud would take up 48% 
                    # of that if the config file value for firstCloudSizePercentage was set to 80%  
                    firstCloudArea = (cloudPercentage/100)*(firstCloudSizePercentage/100)*skyArea
                    validCloud = False
                    while validCloud == False:
                        width = random.uniform(0,360)
                        height = firstCloudArea/width
                        x1 = random.uniform(0, 360 - width)
                        y1 = random.uniform(-90, 90 - height)
                        x2 = x1 + width
                        y2 = y1 + height
                        if y2 <= 90 and x2 <= 360:
                            validCloud = True
                else:
                    # After the first cloud, the rest of the clouds are generated wherever and with a random size, but they do have a minimum possible size
                    # of 6x6 degrees
                    x1 = random.uniform(0, 354)
                    y1 = random.uniform(-90, 84)
                    x2 = random.uniform(x1 + 6, 360)
                    y2 = random.uniform(y1 + 6, 90)
                
                # Check if the new cloud overlaps with any existing clouds
                for existing_cloud in clouds:
                    prevCloudPoints = existing_cloud.getPoints()
                    if prevCloudPoints[0]>=x2 or prevCloudPoints[2]<=x1 or prevCloudPoints[3]<=y1 or prevCloudPoints[1]>=y2:
                        pass
                    else:
                        overlap = True
                        break
                
                # This variable calculates the current area with the new cloud's area added, then subtracts 0.1 in order that it can be confirmed that the
                # new cloud would not send the area over the cloud percentage by more than 10%
                tempArea = ((cloudsArea + (x2-x1)*(y2-y1))/skyArea) - 0.1   
                
                # This variable calculates the difference between the width and the height
                tempDist = abs((x2 - x1) - (y2 - y1))
                
                # If there is no overlap, the new cloud doesn't make the area exceed the could percentage by more than 10%, and the rectnagular does not
                # have a high diparity between it's height and width, then add the new cloud to the list
                if not overlap and tempArea < cloudPercentage/100 and tempDist/(x2-x1) <= 0.7 and tempDist/(y2-y1) <= 0.7:
                    newCloudPoints = [x1,y1,x2,y2]
                    clouds.append(Cloud.Cloud(newCloudPoints))
                    cloudsArea += (x2-x1)*(y2-y1)
        
        return clouds
    